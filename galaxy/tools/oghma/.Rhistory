log <- file(paste(getwd(), "log_encode.txt", sep="/"), open = "wt")
sink(file = log, type="message")
# encode one position in one individual
encodeGenotype.position <- function(x, major, code=c(0,1,2), sep=""){
res <- x
if(!is.na(x)) {
if(isHeterozygous(x, sep = sep)) {
# heterozygous
res <- code[2]
} else {
# determine whether it is the minor or major allele
x <- unlist(strsplit(x, sep))
# need to check only one element as we already know it is a homozygous
if(length(x) > 1) {
x <- x[1]
}
if(x==major) {
res <- code[3]
} else {
res <- code[1]
}
}
} else {
res <- NA
}
return(res)
}
# rewrite a marker to determine the major allele
encodeGenotype.rewrite <- function(x, sep=""){
res <- x
if(!is.na(x)) {
if(length(unlist(strsplit(x,sep)))==1) {
# in case of homozygous, must be counted 2 times
res <- c(x,x)
} else {
res <- unlist(strsplit(x, split=sep))
}
} else {
res <- NA
}
return(res)
}
# encode one individual
encodeGenotype.vec <- function(indiv, sep="", code=c(0,1,2)){
newIndiv <- unlist(lapply(as.character(indiv), encodeGenotype.rewrite, sep))
stat <- table(as.character(newIndiv))
major <- names(stat)[which.max(stat)]
indiv <- unlist(lapply(indiv, encodeGenotype.position, major, code, sep))
return(indiv)
}
isHeterozygous <- function(genotype, sep=""){
bool <- F
if(is.na(genotype)){
bool <- NA
} else {
x <- unlist(strsplit(genotype, sep))
if(length(x) > 1 & !(x[1] %in% x[2])) {
bool <- T
}
}
return(bool)
}
